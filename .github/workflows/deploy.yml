name: Deploy Application

on:
  push:
    branches:
      - main

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || contains(github.event.head_commit.added, 'backend/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm install
        
      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Setup EC2 Instance
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # EC2'ye bağlan ve gerekli kurulumları yap
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${EC2_HOST} '
            # Sistem güncellemesi
            sudo yum update -y
            
            # Docker kurulumu (eğer yoksa)
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            # Docker Compose kurulumu (eğer yoksa)
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Uygulama klasörünü oluştur
            mkdir -p ~/video-platform
          '
          
      - name: Deploy to EC2
        run: |
          # EC2'ye dosyaları kopyala
          scp -i private_key.pem -o StrictHostKeyChecking=no -r backend/* ec2-user@${EC2_HOST}:~/video-platform/
          
          # Environment dosyasını oluştur
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${EC2_HOST} "
            cat > ~/video-platform/.env << 'EOL'
            PORT=3000
            MONGODB_URI=mongodb://mongodb:27017/videodb
            REDIS_URI=redis://redis:6379
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOL
          "
          
          # Uygulamayı başlat
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${EC2_HOST} '
            cd ~/video-platform
            
            # MongoDB ve Redis konteynerlerini kontrol et
            if ! docker ps | grep -q mongodb; then
              docker run -d --name mongodb -p 27017:27017 mongo:latest
            fi
            
            if ! docker ps | grep -q redis; then
              docker run -d --name redis -p 6379:6379 redis:alpine
            fi
            
            # Uygulamayı yeniden başlat
            docker-compose down
            docker-compose up -d
            
            # Log dosyalarını kontrol et
            docker-compose logs --tail=100
          '
          
          rm -f private_key.pem

  deploy-frontend:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || contains(github.event.head_commit.added, 'frontend/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install
        
      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test
        
      - name: Build Frontend
        working-directory: ./frontend
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/ s3://$S3_BUCKET --delete
          
     