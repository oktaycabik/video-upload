name: Deploy Application

on:
  push:
    branches:
      - main

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2'nin Public IPv4 adresi
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "package.json not found in backend directory"
            exit 1
          fi
        
      - name: Run Backend Tests
        working-directory: ./backend
        run: |
          if [ -f "package.json" ]; then
            npm test || true
          fi
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Setup SSH and Test Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/deploy_key
          
          # SSH bağlantı testi
          echo "Testing SSH connection..."
          for i in {1..5}; do
            echo "Attempt $i of 5"
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'; then
              echo "Connection successful"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Could not establish SSH connection after 5 attempts"
              exit 1
            fi
            sleep 5
          done
          
      - name: Setup EC2 Instance
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} '
            # Sistem güncellemesi
            sudo yum update -y || true
            
            # Docker kurulumu
            if ! command -v docker &> /dev/null; then
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            # Docker Compose kurulumu
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Uygulama klasörünü oluştur
            mkdir -p ~/video-platform
          '
          
      - name: Deploy to EC2
        run: |
          # Dosyaları kopyala
          scp -o StrictHostKeyChecking=no -r backend/* ec2-user@${{ secrets.EC2_HOST }}:~/video-platform/
          
          # Environment dosyasını oluştur
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "
            cat > ~/video-platform/.env << 'EOL'
            PORT=3000
            MONGODB_URI=mongodb://mongodb:27017/videodb
            REDIS_URI=redis://redis:6379
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOL
          "
          
          # Uygulamayı başlat
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} '
            cd ~/video-platform
            
            # Docker ağını oluştur
            docker network create video-platform-network || true
            
            # MongoDB ve Redis konteynerlerini başlat
            docker run -d --name mongodb --network video-platform-network \
              -p 27017:27017 \
              -v mongodb_data:/data/db \
              mongo:latest || true
            
            docker run -d --name redis --network video-platform-network \
              -p 6379:6379 \
              redis:alpine || true
            
            # Uygulamayı yeniden başlat
            docker-compose down || true
            docker-compose up -d
            
            # Logları göster
            docker-compose logs --tail=100
          '

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          if [ -f "package.json" ]; then
            npm install
          else
            echo "package.json not found in frontend directory"
            exit 1
          fi
        
      - name: Run Frontend Tests
        working-directory: ./frontend
        run: |
          if [ -f "package.json" ]; then
            npm test || true
          fi
        
      - name: Build Frontend
        working-directory: ./frontend
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
          
      - name: Deploy to S3
        run: |
          if [ -d "frontend/build" ]; then
            aws s3 sync frontend/build/ s3://${{ secrets.S3_BUCKET }} --delete
          else
            echo "Build directory not found"
            exit 1
          fi
          
     